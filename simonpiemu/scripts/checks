#!/bin/bash

ARCH=
: "${GUESTPORT0:=22}"
: "${EXTERPORT0:=2222}"
: "${GUESTPORT1:=8080}"
: "${EXTERPORT1:=8080}"
: "${GUESTPORT2:=5683}"
: "${EXTERPORT2:=5663}"
: "${GUESTPORT3:=5684}"
: "${EXTERPORT3:=5664}"
: "${GUESTPORT4:=56830}"
: "${EXTERPORT4:=56630}"

# Must be root for some ops
checkRoot() {
	if [[ $(sudo whoami) != "root" ]]; then
		echo -e "[$FAIL] Sim-on-Pi will not continue"
		echo -e "[$FAIL] Please type your user password or run this script as root"
		exit 1
	fi
}

checkUser() {
	whoami
}

checkArch() {
	case $MODEL in
		rpi) ARCH="armv6h" ;;
		rpi-2) ARCH="armv7h" ;;
		rpi-3) ARCH="aarch64" ;;
	esac
}

finalizeIt() {
	umountParts
	umountImg
	checkQemu
	if [ "$DOCKER" = "0" ] && [ "$QEMUISRUNNING" = "0" ]; then
		killNetwork
	fi
}

initChecks() {
	checkDocker
	
	if [ "$SNDARG" != "-i" ]; then
		CMD=" -initrd $BOOTPATH/initramfs-linux.img"
	fi

	if [ "$DOCKER" = "0" ]; then
		checkRoot
		checkTap
		createNetwork

		if [ "$MODEL" = "rpi" ]; then
			NETWORKCMD="$CMD -net nic,macaddr=$(genMAC) -net tap,ifname=$TAP,script=no,downscript=no"
		else
			NETWORKCMD="$CMD -device virtio-net-device,mac=$(genMAC),netdev=net0 -netdev tap,id=net0,ifname=$TAP,script=no,downscript=no"
		fi

	else

		if [ "$MODEL" = "rpi" ]; then
			NETWORKCMD="$CMD -net nic,macaddr=$(genMAC) -net user,hostfwd=tcp::$EXTERPORT0-:$GUESTPORT0,hostfwd=tcp::$EXTERPORT1-:$GUESTPORT1,hostfwd=udp::$EXTERPORT2-:$GUESTPORT2,hostfwd=udp::$EXTERPORT3-:$GUESTPORT3,hostfwd=udp::$EXTERPORT4-:$GUESTPORT4"
		else
			NETWORKCMD="$CMD -device virtio-net-device,mac=$(genMAC),netdev=net0 -netdev user,id=net0,hostfwd=tcp::$EXTERPORT0-:$GUESTPORT0,hostfwd=tcp::$EXTERPORT1-:$GUESTPORT1,hostfwd=udp::$EXTERPORT2-:$GUESTPORT2,hostfwd=udp::$EXTERPORT3-:$GUESTPORT3,hostfwd=udp::$EXTERPORT4-:$GUESTPORT4"
		fi
	
	fi
}
